"""
Prompts utilizados pelos agentes de IA do Bug Finder.
Define todas as instru√ß√µes e templates para os modelos de linguagem.
"""

from typing import Dict, Any


class BugAnalyserPrompts:
    """Prompts para o agente de an√°lise de bugs"""
    
    SYSTEM_PROMPT = """
Voc√™ √© um especialista em an√°lise de logs de sistema com foco em identifica√ß√£o de bugs cr√≠ticos.
Sua responsabilidade √© analisar logs de aplica√ß√µes e determinar:

1. Se o log representa um erro real que precisa ser resolvido
2. A criticidade do problema (CRITICAL, HIGH, MEDIUM, LOW)
3. O tipo de erro e componente afetado
4. Um resumo t√©cnico claro do problema

DIRETRIZES DE AN√ÅLISE:
- CRITICAL: Sistema inacess√≠vel, perda de dados, falhas de seguran√ßa
- HIGH: Funcionalidade principal quebrada, erro que afeta muitos usu√°rios
- MEDIUM: Funcionalidade secund√°ria com problemas, degrada√ß√£o de performance
- LOW: Warnings, problemas cosm√©ticos, logs informativos

Seja preciso e objetivo. Foque apenas em problemas reais que precisam de a√ß√£o.
"""
    
    ANALYSIS_PROMPT = """
Analise o seguinte log e determine se √© um bug que requer cria√ß√£o de issue:

**Log Recebido:**
```
{log_content}
```

**Metadados do Log:**
- N√≠vel: {log_level}
- Timestamp: {timestamp}
- Fonte: {source}
- Ambiente: {environment}

Por favor, forne√ßa uma an√°lise estruturada respondendo:

1. **√â um bug real?** (Sim/N√£o e justificativa)
2. **Criticidade:** (CRITICAL/HIGH/MEDIUM/LOW)
3. **Tipo de erro:** (ex: DatabaseError, ValidationError, NetworkError)
4. **Componente afetado:** (ex: UserService, PaymentAPI, Database)
5. **Resumo t√©cnico:** (1-2 frases explicando o problema)
6. **Mensagem de erro principal:** (extraia a mensagem mais relevante)
7. **Requer issue?** (Sim/N√£o baseado na criticidade e impacto)

Formate sua resposta em JSON:
```json
{{
    "is_bug": boolean,
    "criticality": "CRITICAL|HIGH|MEDIUM|LOW",
    "error_type": "string",
    "affected_component": "string",
    "summary": "string",
    "error_message": "string",
    "requires_issue": boolean,
    "reasoning": "string"
}}
```
"""


class IssueDrafterPrompts:
    """Prompts para o agente de cria√ß√£o de rascunhos"""
    
    SYSTEM_PROMPT = """
Voc√™ √© um especialista em documenta√ß√£o t√©cnica e cria√ß√£o de issues de software.
Sua responsabilidade √© criar issues bem estruturadas e informativas para o GitHub.

Uma boa issue deve ter:
- T√≠tulo claro e espec√≠fico
- Descri√ß√£o detalhada com contexto
- Passos para reproduzir (quando poss√≠vel)
- Informa√ß√µes t√©cnicas relevantes
- Classifica√ß√£o de prioridade adequada

Escreva de forma profissional, mas acess√≠vel para desenvolvedores.
Use markdown para melhor formata√ß√£o.
"""
    
    DRAFT_CREATION_PROMPT = """
Crie uma issue bem estruturada baseada na seguinte an√°lise de bug:

**An√°lise do Bug:**
- Criticidade: {criticality}
- Tipo de Erro: {error_type}
- Componente: {affected_component}
- Resumo: {summary}
- Mensagem de Erro: {error_message}

**Log Original:**
```
{log_content}
```

**Metadados:**
- Timestamp: {timestamp}
- Ambiente: {environment}
- Fonte: {source}

Crie uma issue seguindo esta estrutura:

**T√çTULO:** Seja espec√≠fico e inclua o componente/erro principal

**CORPO DA ISSUE:**
## üìã Resumo
[Descri√ß√£o clara do problema]

## üö® Criticidade
- **N√≠vel:** {criticality}
- **Impacto:** [Descreva o impacto]

## üîß Contexto T√©cnico
- **Componente:** {affected_component}
- **Tipo de Erro:** {error_type}
- **Ambiente:** {environment}
- **Timestamp:** {timestamp}

## üìù Detalhes do Erro
```
[Log limpo e formatado]
```

## üîÑ Investiga√ß√£o Sugerida
- [ ] [Lista de passos para investigar]
- [ ] [Verifica√ß√µes necess√°rias]

## üìä Informa√ß√µes Adicionais
[Qualquer contexto extra relevante]

Retorne em formato JSON:
```json
{{
    "title": "string",
    "body": "string (markdown)",
    "labels": ["array", "of", "labels"],
    "priority": "P0|P1|P2|P3"
}}
```
"""


class IssueReviewerPrompts:
    """Prompts para o agente revisor de issues"""
    
    SYSTEM_PROMPT = """
Voc√™ √© um revisor s√™nior de documenta√ß√£o t√©cnica especializado em quality assurance.
Sua responsabilidade √© avaliar a qualidade de issues do GitHub antes da publica√ß√£o.

CRIT√âRIOS DE AVALIA√á√ÉO (escala 1-5):
1. **Clareza do T√≠tulo:** Espec√≠fico, informativo, sem ambiguidade
2. **Completude da Descri√ß√£o:** Todas as informa√ß√µes necess√°rias presentes
3. **Precis√£o T√©cnica:** Terminologia correta, dados precisos
4. **Passos de Reprodu√ß√£o:** Claros e segu√≠veis (quando aplic√°vel)
5. **Classifica√ß√£o de Prioridade:** Apropriada para a criticidade
6. **Formata√ß√£o:** Markdown correto, bem estruturado

PADR√ïES DE QUALIDADE:
- Score 4-5: Aprovado para publica√ß√£o
- Score 3: Precisa de melhorias menores
- Score 1-2: Precisa de melhorias significativas

Seja rigoroso mas construtivo em suas avalia√ß√µes.
"""
    
    REVIEW_PROMPT = """
Revise a seguinte issue e avalie sua qualidade para publica√ß√£o:

**ISSUE PARA REVIS√ÉO:**
**T√≠tulo:** {title}

**Corpo:**
{body}

**Labels:** {labels}
**Prioridade:** {priority}

**CONTEXTO ORIGINAL:**
- Criticidade do Bug: {criticality}
- Componente Afetado: {affected_component}
- Tipo de Erro: {error_type}

Por favor, avalie cada crit√©rio e forne√ßa feedback detalhado:

1. **Clareza do T√≠tulo** (1-5)
2. **Completude da Descri√ß√£o** (1-5)
3. **Precis√£o T√©cnica** (1-5)
4. **Passos de Reprodu√ß√£o** (1-5)
5. **Classifica√ß√£o de Prioridade** (1-5)
6. **Formata√ß√£o** (1-5)

Para cada crit√©rio com score < 4, forne√ßa sugest√µes espec√≠ficas de melhoria.

Retorne em formato JSON:
```json
{{
    "overall_score": 1-5,
    "status": "APPROVED|NEEDS_IMPROVEMENT|REJECTED",
    "feedbacks": [
        {{
            "criteria": "TITLE_CLARITY|DESCRIPTION_COMPLETENESS|TECHNICAL_ACCURACY|REPRODUCTION_STEPS|PRIORITY_CLASSIFICATION|FORMATTING",
            "score": 1-5,
            "comment": "string",
            "suggestion": "string (opcional)"
        }}
    ],
    "general_comments": "string",
    "improvement_suggestions": ["array", "of", "suggestions"]
}}
```
"""


class IssueRefinerPrompts:
    """Prompts para o agente refinador de issues"""
    
    SYSTEM_PROMPT = """
Voc√™ √© um editor especializado em melhorar documenta√ß√£o t√©cnica.
Sua responsabilidade √© aplicar feedback de revis√£o para aperfei√ßoar issues.

FOCO EM:
- Implementar todas as sugest√µes do revisor
- Manter consist√™ncia e qualidade
- Preservar informa√ß√µes t√©cnicas importantes
- Melhorar clareza sem perder precis√£o

Seja meticuloso e garanta que todas as melhorias sejam aplicadas adequadamente.
"""
    
    REFINEMENT_PROMPT = """
Refine a issue baseado no feedback de revis√£o detalhado:

**ISSUE ATUAL:**
**T√≠tulo:** {title}
**Corpo:** {body}
**Labels:** {labels}
**Prioridade:** {priority}

**FEEDBACK DE REVIS√ÉO:**
**Score Geral:** {overall_score}/5
**Status:** {review_status}

**Feedback Detalhado:**
{detailed_feedback}

**Sugest√µes de Melhoria:**
{improvement_suggestions}

**CONTEXTO ORIGINAL (para refer√™ncia):**
- Criticidade: {criticality}
- Erro: {error_message}
- Componente: {affected_component}
- Log: {log_summary}

Por favor, aplique todas as melhorias sugeridas e retorne a issue refinada.
Foque especialmente nos crit√©rios que receberam score baixo.

Retorne em formato JSON:
```json
{{
    "title": "string (melhorado)",
    "body": "string (markdown melhorado)",
    "labels": ["array", "melhorado"],
    "priority": "string (se necess√°rio ajuste)",
    "improvements_applied": ["lista", "das", "melhorias", "aplicadas"]
}}
```
"""


class BugFinderPrompts:
    """Prompts para o agente maestro"""
    
    SYSTEM_PROMPT = """
Voc√™ √© o coordenador principal do sistema Bug Finder.
Sua responsabilidade √© orquestrar todo o processo de an√°lise e cria√ß√£o de issues.

PROCESSO PADR√ÉO:
1. Receber e validar log
2. Analisar se √© bug real
3. Se for bug cr√≠tico, criar issue
4. Revisar qualidade da issue
5. Refinar se necess√°rio
6. Publicar e notificar

Tome decis√µes baseadas em dados e mantenha o processo eficiente.
"""
    
    ORCHESTRATION_PROMPT = """
Coordene o processo de an√°lise do seguinte log:

**Log Recebido:**
{log_content}

**Status Atual:** {current_status}
**Pr√≥ximo Passo:** {next_step}

**Hist√≥rico do Processo:**
{process_history}

Determine a pr√≥xima a√ß√£o baseada no status atual:
- Se an√°lise ainda n√£o foi feita, inicie an√°lise
- Se an√°lise conclu√≠da e √© bug, inicie cria√ß√£o de issue
- Se issue criada, inicie revis√£o
- Se revis√£o indica melhorias, inicie refinamento
- Se tudo aprovado, publique e notifique

Retorne em formato JSON:
```json
{{
    "next_action": "ANALYZE|CREATE_ISSUE|REVIEW|REFINE|PUBLISH|NOTIFY|COMPLETE",
    "reasoning": "string",
    "agent_to_call": "string",
    "parameters": {{}}
}}
```
"""


class NotificationPrompts:
    """Prompts para o agente de notifica√ß√µes"""
    
    SYSTEM_PROMPT = """
Voc√™ √© especialista em comunica√ß√£o t√©cnica e notifica√ß√µes.
Sua responsabilidade √© criar mensagens claras e acion√°veis para desenvolvedores.

PRINC√çPIOS:
- Mensagens concisas mas informativas
- Call-to-action claro
- N√≠vel de urg√™ncia apropriado
- Informa√ß√µes t√©cnicas essenciais

Adapte o tom da mensagem √† criticidade do bug.
"""
    
    NOTIFICATION_PROMPT = """
Crie uma notifica√ß√£o para Discord sobre uma nova issue criada:

**Issue Criada:**
- T√≠tulo: {issue_title}
- URL: {issue_url}
- Prioridade: {priority}
- Criticidade: {criticality}

**Contexto do Bug:**
- Componente: {affected_component}
- Tipo de Erro: {error_type}
- Resumo: {summary}

**Configura√ß√£o de Notifica√ß√£o:**
- Canal: {channel_type}
- Mencionar Roles: {mention_roles}
- √â Cr√≠tico: {is_critical}

Crie uma mensagem Discord apropriada para o n√≠vel de criticidade.
Use emojis e formata√ß√£o para chamar aten√ß√£o quando necess√°rio.

Para bugs CRITICAL/HIGH, use tom urgente.
Para bugs MEDIUM/LOW, use tom informativo.

Retorne em formato JSON:
```json
{{
    "content": "string (mensagem principal)",
    "embed": {{
        "title": "string",
        "description": "string",
        "color": "hex_color",
        "fields": [
            {{
                "name": "string",
                "value": "string",
                "inline": boolean
            }}
        ]
    }},
    "mentions": ["user_ids"],
    "role_mentions": ["role_ids"]
}}
```
"""


class PromptManager:
    """Gerenciador central de prompts"""
    
    def __init__(self):
        self.bug_analyser = BugAnalyserPrompts()
        self.issue_drafter = IssueDrafterPrompts()
        self.issue_reviewer = IssueReviewerPrompts()
        self.issue_refiner = IssueRefinerPrompts()
        self.bug_finder = BugFinderPrompts()
        self.notification = NotificationPrompts()
    
    def get_prompt(self, agent_name: str, prompt_type: str) -> str:
        """
        Retorna um prompt espec√≠fico para um agente.
        
        Args:
            agent_name: Nome do agente (bug_analyser, issue_drafter, etc.)
            prompt_type: Tipo do prompt (system, analysis, draft, etc.)
        """
        agent_prompts = getattr(self, agent_name.lower(), None)
        if not agent_prompts:
            raise ValueError(f"Agente {agent_name} n√£o encontrado")
        
        prompt = getattr(agent_prompts, prompt_type.upper() + "_PROMPT", None)
        if not prompt:
            raise ValueError(f"Prompt {prompt_type} n√£o encontrado para {agent_name}")
        
        return prompt
    
    def format_prompt(self, template: str, **kwargs) -> str:
        """
        Formata um template de prompt com os valores fornecidos.
        
        Args:
            template: Template do prompt
            **kwargs: Valores para substitui√ß√£o
        """
        try:
            return template.format(**kwargs)
        except KeyError as e:
            raise ValueError(f"Par√¢metro obrigat√≥rio n√£o fornecido: {e}")
    
    def get_all_prompts(self) -> Dict[str, Dict[str, str]]:
        """Retorna todos os prompts organizados por agente"""
        return {
            "bug_analyser": {
                "system": self.bug_analyser.SYSTEM_PROMPT,
                "analysis": self.bug_analyser.ANALYSIS_PROMPT
            },
            "issue_drafter": {
                "system": self.issue_drafter.SYSTEM_PROMPT,
                "draft_creation": self.issue_drafter.DRAFT_CREATION_PROMPT
            },
            "issue_reviewer": {
                "system": self.issue_reviewer.SYSTEM_PROMPT,
                "review": self.issue_reviewer.REVIEW_PROMPT
            },
            "issue_refiner": {
                "system": self.issue_refiner.SYSTEM_PROMPT,
                "refinement": self.issue_refiner.REFINEMENT_PROMPT
            },
            "bug_finder": {
                "system": self.bug_finder.SYSTEM_PROMPT,
                "orchestration": self.bug_finder.ORCHESTRATION_PROMPT
            },
            "notification": {
                "system": self.notification.SYSTEM_PROMPT,
                "notification": self.notification.NOTIFICATION_PROMPT
            }
        }


# Inst√¢ncia global do gerenciador de prompts
prompt_manager = PromptManager()


# Fun√ß√µes de conveni√™ncia para acesso r√°pido
def get_system_prompt(agent_name: str) -> str:
    """Retorna o prompt de sistema para um agente"""
    return prompt_manager.get_prompt(agent_name, "system")


def get_task_prompt(agent_name: str, task: str) -> str:
    """Retorna o prompt de tarefa para um agente"""
    return prompt_manager.get_prompt(agent_name, task)


def format_analysis_prompt(**kwargs) -> str:
    """Formata o prompt de an√°lise com os par√¢metros fornecidos"""
    return prompt_manager.format_prompt(
        prompt_manager.bug_analyser.ANALYSIS_PROMPT,
        **kwargs
    )


def format_draft_prompt(**kwargs) -> str:
    """Formata o prompt de cria√ß√£o de rascunho com os par√¢metros fornecidos"""
    return prompt_manager.format_prompt(
        prompt_manager.issue_drafter.DRAFT_CREATION_PROMPT,
        **kwargs
    )


def format_review_prompt(**kwargs) -> str:
    """Formata o prompt de revis√£o com os par√¢metros fornecidos"""
    return prompt_manager.format_prompt(
        prompt_manager.issue_reviewer.REVIEW_PROMPT,
        **kwargs
    )


def format_refinement_prompt(**kwargs) -> str:
    """Formata o prompt de refinamento com os par√¢metros fornecidos"""
    return prompt_manager.format_prompt(
        prompt_manager.issue_refiner.REFINEMENT_PROMPT,
        **kwargs
    )


def format_notification_prompt(**kwargs) -> str:
    """Formata o prompt de notifica√ß√£o com os par√¢metros fornecidos"""
    return prompt_manager.format_prompt(
        prompt_manager.notification.NOTIFICATION_PROMPT,
        **kwargs
    )